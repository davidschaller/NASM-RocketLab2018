using UnityEngine;using System.Collections;
public class DoorControl : MonoBehaviour{	public enum DoorState{Open, Close, Opens, Closes};
    public bool slider = false;	public DoorState CurState = DoorState.Close;	private DoorState state = DoorState.Close;		private float OpenTime=0f;	public float OpenedTime = 5f;	
	public DoorState State	{        get        {            return state;        }        set        {            state = value;			if(state==DoorState.Open)			{				OpenTime = Time.time;			}        }	}		float angle = 0;	    void Awake()    {    }		void CheckTimer()	{		if (OpenTime != 0 && (Time.time - OpenTime) > OpenedTime)        {			OpenTime = 0;			State = DoorState.Closes;		}	}    void Update()    {		if(State == DoorState.Opens)		{	        if (slider)	            OpenSlider();	        else	            Open();		}				if(State == DoorState.Closes)		{	        if (slider)	            CloseSlider();	        else	            Close();		}				CheckTimer();    }    public void OnTriggerEnter(Collider coll)    {		if(State == DoorState.Close)	        angle = 0;			        State = DoorState.Opens;    }    public void OnTriggerStay(Collider coll)    {		if(State == DoorState.Close)	        angle = 0;		State = DoorState.Opens;    }    private void Open()    {        if(transform.localRotation.eulerAngles.y < 90)        {            transform.Rotate(Vector3.up, angle);            angle += Time.deltaTime * 10;            return ;        }        State = DoorState.Open;    }    private void Close()    {        if(transform.localRotation.eulerAngles.y > 0 && transform.localRotation.eulerAngles.y < 300)        {            transform.Rotate(Vector3.up, -angle);            angle += Time.deltaTime * 10;            return ;        }        transform.localRotation = new Quaternion(0, 0, 0, 0);        State = DoorState.Close;    }    private IEnumerator OpenSlider()    {        float t = 0;        Vector3 oldPos = transform.position;        Vector3 newPos = transform.position + transform.TransformDirection(Vector3.right * 1);        while (t < 1)        {            transform.position = Vector3.Lerp(oldPos, newPos, t);            t+= Time.deltaTime * 3;            yield return 0;        }        transform.position = newPos;        yield return 0;    }    private IEnumerator CloseSlider()    {        float t = 0;        Vector3 oldPos = transform.position;        Vector3 newPos = transform.position + transform.TransformDirection(Vector3.left * 1);        while (t < 1)        {            transform.position = Vector3.Lerp(oldPos, newPos, t);            t += Time.deltaTime * 3;            yield return 0;        }        transform.position = newPos;        yield return 0;    }    public void OnTriggerExit(Collider coll)    {		/* 		if(State == DoorState.Open)	        angle = 0;		State = DoorState.Closes;		*/    }}